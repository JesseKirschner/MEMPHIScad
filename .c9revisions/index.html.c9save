{"ts":1366208240088,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1366208243880,"patch":[[{"diffs":[[1,"<!DOCTYPE html>\n<html>\n    <head>\n        <title> </title>\n    </head>\n    <body>\n\n    </body>\n</html>\n"]],"start1":0,"start2":0,"length1":0,"length2":103}]],"length":103,"saved":false}
{"ts":1366208547898,"patch":[[{"diffs":[[0," <title>"],[1," MEMPHIS in ANTWERPEN"],[0," </title"]],"start1":41,"start2":41,"length1":16,"length2":37}]],"length":124,"saved":false}
{"ts":1366208562404,"patch":[[{"diffs":[[0,"  <body>"],[1,"\n    \n    "],[0,"\n\n    </"]],"start1":94,"start2":94,"length1":16,"length2":26}]],"length":134,"saved":false}
{"ts":1366208656978,"patch":[[{"diffs":[[0,"/title>\n"],[1,"        \n        <script type=\"text/javascript\" src=\"https://raw.github.com/mrdoob/three.js/master/build/three.min.js\"></script>\n"],[0,"    </he"]],"start1":72,"start2":72,"length1":16,"length2":145}]],"length":263,"saved":false}
{"contributors":[],"silentsave":false,"ts":1366209664607,"patch":[[{"diffs":[[0,"  \n    \n"],[1,"    \n    "],[0,"\n    </b"]],"start1":234,"start2":234,"length1":16,"length2":25}]],"length":272,"saved":false}
{"ts":1366210052843,"patch":[[{"diffs":[[0,"y>\n    \n    "],[-1,"\n    "],[1,"kijsdfsfij"],[0,"\n    \n    </"]],"start1":229,"start2":229,"length1":29,"length2":34}]],"length":277,"saved":false}
{"ts":1366210363197,"patch":[[{"diffs":[[0,"e>\n        \n"],[1,"    </head>\n    <body>\n    \n"],[0,"        <scr"]],"start1":77,"start2":77,"length1":24,"length2":52},{"diffs":[[0,"    "],[-1,"</head>\n    <body>\n    \n    kijsdfsfij"],[1,"\n        'use strict';"],[0,"\n   "]],"start1":237,"start2":237,"length1":46,"length2":30}]],"length":289,"saved":false}
{"ts":1366210623967,"patch":[[{"diffs":[[0,"    "],[-1,"'use strict';"],[1,"<script type=\"text/javascript\">\n    \n\t'use strict';\n\t\n\tvar initScene, render,\n\t\tprojector, renderer, render_stats, physics_stats, scene, camera,\n        \n\t\t//dit is alles om met de muis te kunnen werken\n\t\tinitEventHandling, intersect_plane, selected_cell = null, controls,\n\t\tmouse_position = new THREE.Vector3;\n\t\n\tinitScene = function() {\n\t\tprojector = new THREE.Projector;\n\t\t\n\t\tscene = new THREE.Scene;\n\t\tscene.setGravity(new THREE.Vector3( 0, 0, 0 ));\n\n\t\tscene.addEventListener(\n\t\t\t'update',\n\t\t\tfunction() {\n                \n                console.log(\"bla\");\n\t\t\t}\n\t\t);\n\t\t\n\t\tcamera = new THREE.PerspectiveCamera(\n\t\t\t35,\n\t\t\twindow.innerWidth / window.innerHeight,\n\t\t\t1,\n\t\t\t1000\n\t\t);\n\t\tcamera.position.set( 25, 20, 25 );\n\t\tcamera.lookAt( scene.position );\n\t\t\n\t\tcontrols = new THREE.TrackballControls( camera );\n\t\t\n\t\tscene.add( camera );\n\t\t\t\n        //dit plane moet veranderen bij het veranderen van het camera standpunt\n\t\tintersect_plane = new THREE.Mesh(\n\t\t\tnew THREE.PlaneGeometry( 150, 150 ),\n\t\t\tnew THREE.MeshBasicMaterial({ opacity: 0, transparent: true })\n\t\t);\n\t\t\n\t\tintersect_plane.rotation.x = Math.PI / -2;\n\t\tscene.add( intersect_plane );\n\t\t\n\t\tinitEventHandling();\n\t\t\n\t\t\n\t\t//#TODO\n\t\t//een lijst die ik meegeef aan scene bij het simuleren van de wereld\n\t\t\n\t\t\n\t\trequestAnimationFrame( render );\n\t\tscene.simulate();\n\t};\n\n\t\n\trender = function() {\n\t\trequestAnimationFrame( render );\n\t\t\n\t\tcontrols.update();\n\t\trenderer.render( scene, camera );\n\t\t\n\t\trender_stats.update();\n\t};\n\t\n\t//Mouse\n\n\tinitEventHandling = (function() {\n\t\tvar _vector = new THREE.Vector3,\n\t\t\tprojector = new THREE.Projector(),\n\t\t\thandleMouseDown, handleMouseMove, handleMouseUp;\n\t\t\n\t\thandleMouseDown = function( evt ) {\n\t\t\tif(evt.button = 2){\n\t\t\t\tvar ray, intersections;\n\t\t\t\t\n\t\t\t\t_vector.set(\n\t\t\t\t\t( evt.clientX / window.innerWidth ) * 2 - 1,\n\t\t\t\t\t-( evt.clientY / window.innerHeight ) * 2 + 1,\n\t\t\t\t\t1\n\t\t\t\t);\n\t\n\t\t\t\tprojector.unprojectVector( _vector, camera );\n\t\t\t\t\n\t\t\t\tray = new THREE.Raycaster( camera.position, _vector.sub( camera.position ).normalize() );\n\t\t\t\tintersections = ray.intersectObjects( scene._cellsArray );\n\t\n\t\t\t\tif ( intersections.length > 0 ) {\n\t\t\t\t\tselected_cell = intersections[0].object;\n\t\t\t\t\t\n\t\t\t\t\t_vector.set( 0, 0, 0 );\n\t\t\t\t\tselected_cell.setAngularFactor( _vector );\n\t\t\t\t\tselected_cell.setAngularVelocity( _vector );\n\t\t\t\t\tselected_cell.setLinearFactor( _vector );\n\t\t\t\t\tselected_cell.setLinearVelocity( _vector );\n\t\n\t\t\t\t\tmouse_position.copy( intersections[0].point );\n\t\t\t\t\tcell_offset.subVectors( selected_cell.position, mouse_position );\n\t\t\t\t\t\n\t\t\t\t\tintersect_plane.position.y = mouse_position.y;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t\n\t\thandleMouseMove = function( evt ) {\n\t\t\tif(evt.button = 2){\n\t\t\t\tvar ray, intersection,\n\t\t\t\t\ti, scalar;\n\t\t\t\t\n\t\t\t\tif ( selected_cell !== null ) {\n\t\t\t\t\t\n\t\t\t\t\t_vector.set(\n\t\t\t\t\t\t( evt.clientX / window.innerWidth ) * 2 - 1,\n\t\t\t\t\t\t-( evt.clientY / window.innerHeight ) * 2 + 1,\n\t\t\t\t\t\t1\n\t\t\t\t\t);\n\t\t\t\t\tprojector.unprojectVector( _vector, camera );\n\t\t\t\t\t\n\t\t\t\t\tray = new THREE.Raycaster( camera.position, _vector.sub( camera.position ).normalize() );\n\t\t\t\t\t\n\t\t\t\t\t//because of the rotation the plane changes as well.\n\t\t\t\t\t//i must rotate the plane along with the camera I guess\n\t\t\t\t\tintersection = ray.intersectObject( intersect_plane );\n\t\t\t\t\tmouse_position.copy( intersection[0].point );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t\n\t\thandleMouseUp = function( evt ) {\n\t\t\tif(evt.button = 2){\n\t\t\t\t\n\t\t\t\tif ( selected_cell !== null ) {\n\t\t\t\t\t//om te testen\n\t\t\t\t\t\n\t\t\t\t\tif(evt.ctrlKey) selected_cell.division();\n\t\t\t\t\t\n\t\t\t\t\t//einde test\n\t\t\t\t\t\n\t\t\t\t\t_vector.set( 1, 1, 1 );\n\t\t\t\t\tselected_cell.setAngularFactor( _vector );\n\t\t\t\t\tselected_cell.setLinearFactor( _vector );\n\t\t\t\t\t\n\t\t\t\t\tselected_cell = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t};\n\t\t\n\t\treturn function() {\n\t\t\trenderer.domElement.addEventListener( 'mousedown', handleMouseDown );\n\t\t\trenderer.domElement.addEventListener( 'mousemove', handleMouseMove );\n\t\t\trenderer.domElement.addEventListener( 'mouseup', handleMouseUp );\n\t\t};\n\t})();\n\t\n\twindow.onload = initScene;\n\t\n\t</script>"],[0,"\n   "]],"start1":246,"start2":246,"length1":21,"length2":3991}]],"length":4259,"saved":false}
{"ts":1366210913569,"patch":[[{"diffs":[[0,"\t\t\t\t"],[-1,"var ray, intersections;\n\t\t\t\t\n\t\t\t\t_vector.set(\n\t\t\t\t\t( evt.clientX / window.innerWidth ) * 2 - 1,\n\t\t\t\t\t-( evt.clientY / window.innerHeight ) * 2 + 1,\n\t\t\t\t\t1\n\t\t\t\t);\n\t\n\t\t\t\tprojector.unprojectVector( _vector, camera );\n\t\t\t\t\n\t\t\t\tray = new THREE.Raycaster( camera.position, _vector.sub( camera.position ).normalize() );\n\t\t\t\tintersections = ray.intersectObjects( scene._cellsArray );\n\t\n\t\t\t\tif ( intersections.length > 0 ) {\n\t\t\t\t\tselected_cell = intersections[0].object;\n\t\t\t\t\t\n\t\t\t\t\t_vector.set( 0, 0, 0 );\n\t\t\t\t\tselected_cell.setAngularFactor( _vector );\n\t\t\t\t\tselected_cell.setAngularVelocity( _vector );\n\t\t\t\t\tselected_cell.setLinearFactor( _vector );\n\t\t\t\t\tselected_cell.setLinearVelocity( _vector );\n\t\n\t\t\t\t\tmouse_position.copy( intersections[0].point );\n\t\t\t\t\tcell_offset.subVectors( selected_cell.position, mouse_position );\n\t\t\t\t\t\n\t\t\t\t\tintersect_plane.position.y = mouse_position.y;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t\n\t\thandleMouseMove = function( evt ) {\n\t\t\tif(evt.button = 2){\n\t\t\t\tvar ray, intersection,\n\t\t\t\t\ti, scalar;\n\t\t\t\t\n\t\t\t\tif ( selected_cell !== null ) {\n\t\t\t\t\t\n\t\t\t\t\t_vector.set(\n\t\t\t\t\t\t( evt.clientX / window.innerWidth ) * 2 - 1,\n\t\t\t\t\t\t-( evt.clientY / window.innerHeight ) * 2 + 1,\n\t\t\t\t\t\t1\n\t\t\t\t\t);\n\t\t\t\t\tprojector.unprojectVector( _vector, camera );\n\t\t\t\t\t\n\t\t\t\t\tray = new THREE.Raycaster( camera.position, _vector.sub( camera.position ).normalize() );\n\t\t\t\t\t\n\t\t\t\t\t//because of the rotation the plane changes as well.\n\t\t\t\t\t//i must rotate the plane along with the camera I guess\n\t\t\t\t\tintersection = ray.intersectObject( intersect_plane );\n\t\t\t\t\tmouse_position.copy( intersection[0].point );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t\n\t\thandleMouseUp = function( evt ) {\n\t\t\tif(evt.button = 2){\n\t\t\t\t\n\t\t\t\tif ( selected_cell !== null ) {\n\t\t\t\t\t//om te testen\n\t\t\t\t\t\n\t\t\t\t\tif(evt.ctrlKey) selected_cell.division();\n\t\t\t\t\t\n\t\t\t\t\t//einde test\n\t\t\t\t\t\n\t\t\t\t\t_vector.set( 1, 1, 1 );\n\t\t\t\t\tselected_cell.setAngularFactor( _vector );\n\t\t\t\t\tselected_cell.setLinearFactor( _vector );\n\t\t\t\t\t\n\t\t\t\t\tselected_cell = null;\n\t\t\t\t}"],[1,"console.log(\"hier met de raytracing enzo\");\n\t\t\t}\n\t\t};\n\t\t\n\t\thandleMouseMove = function( evt ) {\n\t\t\tif(evt.button = 2){\n\t\t\t}\n\t\t};\n\t\t\n\t\thandleMouseUp = function( evt ) {\n\t\t\tif(evt.button = 2){"],[0,"\n\t\t\t"]],"start1":1966,"start2":1966,"length1":1962,"length2":197}]],"length":2494,"saved":false}
{"ts":1366210951080,"patch":[[{"diffs":[[0,";\n\t\t"],[-1,"scene.setGravity(new THREE.Vector3( 0, 0, 0 ));\n"],[0,"\n\t\ts"]],"start1":652,"start2":652,"length1":56,"length2":8}]],"length":2446,"saved":false}
{"ts":1366211005582,"patch":[[{"diffs":[[0,".Scene;\n"],[1,"        \n        console.log(scene);\n"],[0,"\t\t\n\t\tsce"]],"start1":646,"start2":646,"length1":16,"length2":53}]],"length":2483,"saved":false}
{"ts":1366211065728,"patch":[[{"diffs":[[0,"\n\t\t\n"],[-1,"\t\tscene.addEventListener(\n\t\t\t'update',\n\t\t\tfunction() {\n                \n                console.log(\"bla\");\n\t\t\t}\n\t\t);\n\t\t\n"],[0,"\t\tca"]],"start1":690,"start2":690,"length1":129,"length2":8}]],"length":2362,"saved":false}
{"ts":1366211201960,"patch":[[{"diffs":[[0,"log("],[-1,"scene);\n\t\t"],[1,"THREE);\n        "],[0,"\n\t\tc"]],"start1":679,"start2":679,"length1":18,"length2":24}]],"length":2368,"saved":false}
{"ts":1366211659313,"patch":[[{"diffs":[[0,"script>\n    "],[1,"    <script type=\"text/javascript\" src=\"https://raw.github.com/mrdoob/three.js/3d354a70d5a84a3d513caf8a8bc30c95b3a338e2/examples/js/controls/TrackballControls.js\"></script>\n        "],[0,"\n        <sc"]],"start1":229,"start2":229,"length1":24,"length2":205}]],"length":2549,"saved":false}
{"ts":1366211737699,"patch":[[{"diffs":[[0,"jector;\n"],[1,"        \n        renderer = new THREE.WebGLRenderer({ antialias: true });\n    \trenderer.setSize( window.innerWidth, window.innerHeight );\n\t\trenderer.shadowMapEnabled = true;\n\t\trenderer.shadowMapSoft = true;\n\t\tdocument.getElementById( 'viewport' ).appendChild( renderer.domElement );\n"],[0,"\t\t\n\t\tsce"]],"start1":797,"start2":797,"length1":16,"length2":299}]],"length":2832,"saved":false}
{"ts":1366211931344,"patch":[[{"diffs":[[0,"   \n"],[-1,"        console.log(THREE);\n        \n"],[0,"\t\tca"]],"start1":1123,"start2":1123,"length1":45,"length2":8},{"diffs":[[0,"cript>\n    \n"],[1,"    <div id=\"viewport\"></div>\n    \n"],[0,"    </body>\n"]],"start1":2763,"start2":2763,"length1":24,"length2":59},{"diffs":[[0,"</body>\n"],[1,"\n"],[0,"</html>\n"]],"start1":2814,"start2":2814,"length1":16,"length2":17}]],"length":2831,"saved":false}
{"ts":1366211972365,"patch":[[{"diffs":[[0," );\n"],[-1,"\t\tscene.simulate();\n"],[0,"\t};\n"]],"start1":1850,"start2":1850,"length1":28,"length2":8}]],"length":2811,"saved":false}
{"ts":1366211995142,"patch":[[{"diffs":[[0," );\n"],[-1,"\t\t\n\t\trender_stats.update();\n"],[0,"\t};\n"]],"start1":1975,"start2":1975,"length1":36,"length2":8}]],"length":2783,"saved":false}
